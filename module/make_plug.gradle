boolean deleteFile(File file) {
    if (file == null || !file.exists()) {
        return false
    }
    File[] files = file.listFiles();
    for (File f : files) {
        if (f.isDirectory()) {
            deleteFile(f)
        } else {
            f.delete()
        }
    }
    file.delete()
    return true
}

def copyFile(src, des, name) {
    File srcFile = file(src)
    File destDir = file(des)
    if (!srcFile.exists()) {
        println("$srcFile not exists!")
        return
    }
    if (destDir.exists() && !destDir.isDirectory()) {
        throw new GradleException("$destDir not is a directory!")
    }

    copy {
        from srcFile
        into destDir
        rename { String filename ->
            return name == null ? filename : name
        }
    }
}

def copyFile(src, des) {
    copyFile(src, des, null)
}

void CpyPlugFile() {
    String base32Path = "${projectDir}/libs/armeabi-v7a/"
    String base64Path = "${projectDir}/libs/arm64-v8a/"
    String so32Name = "armeabi-v7a.so"
    String so64Name = "arm64-v8a.so"

    copyFile(base64Path + "libanalyse.so", "${projectDir}/magisk_module/zygisk", so64Name)
    copyFile(base32Path + "libanalyse.so", "${projectDir}/magisk_module/zygisk", so32Name)
}

tasks.register('ZipPlug', Zip) {
    archiveFileName = "output.zip"
    destinationDirectory = file("${projectDir}/out/")
    from file("${projectDir}/magisk_module/")
}

void executeTask(Task task) {
    task.taskDependencies.getDependencies(task).each {
        subTask -> executeTask(subTask)
    }
    task.actions.each { it.execute(task) }
}

void BuildMagiskPlug() {
    try {
        println "start make magisk plug"
        file("${projectDir}/out").mkdirs()
        CpyPlugFile()
        executeTask(ZipPlug)
        println "make magisk plug finish"
    } catch (Throwable e) {
        println("make plug error: " + e)
        e.printStackTrace()
    }
}

ext {
    BuildMagiskPlug = this.&BuildMagiskPlug
}
